<?xml version='1.0' encoding='UTF-8'?>
<scribes version="0.1">
    <snippet>
        <entry>
            <trigger id="r">aes</trigger>
            <description>Define aesthetic mapping</description>
            <template>aes(${dim_1}, ${dim_2}, ${..,} colour = ${dim_i}, size = ${dim_j})</template>
        </entry>
        <entry>
            <trigger id="r">aformals</trigger>
            <description>Set the formal arguments of a function using alist</description>
            <template>formals(${function}) &lt;- alist(${arg1 = val1}, ${arg1 = val1}, ${...})</template>
        </entry>
        <entry>
            <trigger id="r">afun</trigger>
            <description>anonymous function</description>
            <template>(function(${arg1}, ${arg2}, ${arg3}, ${...})  {
  ${args &lt;- list(...)}
  ${do something here}
  return (${something})
}) (${value1}, ${value2}, ${value3}, ${...})</template>
        </entry>
        <entry>
            <trigger id="r">all</trigger>
            <description>Are All Values True?</description>
            <template>all(${logical vec_1}, ${logical vec_1}, ${...}, na.rm = FALSE)

# if(all(x&gt;0, y&lt;0)) cat("everything ok\n")
</template>
        </entry>
        <entry>
            <trigger id="r">apply</trigger>
            <description>apply function to array or matrix</description>
            <template>apply(${matrix or array}, c(${1,2}), ${function}, ${args to function})
# 1 for rows, 2 for columns and c(1,2) indicates rows and columns</template>
        </entry>
        <entry>
            <trigger id="r">aqplot</trigger>
            <description>ggplot2 attach data and then qplot</description>
            <template>attach(${data.frame})
qplot(${dim_1}, ${dim_2} ${= NULL}, ${dim_3} ${= NULL}, ${...}, colour = ${dim_i}, shape = ${dim_j},${facets} ${geom} ${stat} ${xlim} ${ylim} ${glog} main = "${plot title}", xlab = "${x-axis}", ylab = "${y-axis}") + ${ggplot_functions}</template>
        </entry>
        <entry>
            <trigger id="r">args</trigger>
            <description>function arguments </description>
            <template>args(${function})</template>
        </entry>
        <entry>
            <trigger id="r">arr</trigger>
            <description>Array function</description>
            <template>${myarray} &lt;- array(${data_vector}, ${dimension_vector})
#  x &lt;- array(1:20, dim=c(4,5)) </template>
        </entry>
        <entry>
            <trigger id="r">as.arr</trigger>
            <description>as array</description>
            <template>as.array(${r.object}, ${args})</template>
        </entry>
        <entry>
            <trigger id="r">as.char</trigger>
            <description>as character</description>
            <template>as.character(${r.object}, ${args})</template>
        </entry>
        <entry>
            <trigger id="r">as.data</trigger>
            <description>As data.frame</description>
            <template>as.data.frame(${r.object}, ${args})</template>
        </entry>
        <entry>
            <trigger id="r">as.logi</trigger>
            <description>as logical</description>
            <template>as.logical(${r.object}, ${args})</template>
        </entry>
        <entry>
            <trigger id="r">as.mat</trigger>
            <description>as matrix</description>
            <template>as.matrix(${r.object}, ${args})</template>
        </entry>
        <entry>
            <trigger id="r">as.num</trigger>
            <description>as numeric</description>
            <template>as.numeric(${r.object}, ${args})</template>
        </entry>
        <entry>
            <trigger id="r">attach</trigger>
            <description>Attaching a data frame (or list) to the search path</description>
            <template>attach(${data.frame or list})</template>
        </entry>
        <entry>
            <trigger id="r">break</trigger>
            <description>break  apply only to the innermost of nested loops.</description>
            <template>break</template>
        </entry>
        <entry>
            <trigger id="r">cat</trigger>
            <description>cat normally used with print for outputs</description>
            <template>cat(${R_obj1}, ${R_obj2}, ${...} , file = "", sep = " ", fill = ${FALSE}, 
       labels = ${NULL}, append = ${FALSE})</template>
        </entry>
        <entry>
            <trigger id="r">cbind</trigger>
            <description>combine vectors into matrices in a column by column</description>
            <template>cbind(${vec1 or matrix1}, ${vec2 or matrix2}, ${...}, deparse.level = ${1})</template>
        </entry>
        <entry>
            <trigger id="r">cdir</trigger>
            <description>Create a dir</description>
            <template>dir.create("${path/dirName}")</template>
        </entry>
        <entry>
            <trigger id="r">cfile</trigger>
            <description>Create a file</description>
            <template>file.create("${path/fileName}")</template>
        </entry>
        <entry>
            <trigger id="r">chdir</trigger>
            <description>Set or change working dir</description>
            <template>setwd("${path/to/dir}")</template>
        </entry>
        <entry>
            <trigger id="r">class3</trigger>
            <description>S3 style class and objects</description>
            <template># Cunstructor  function
${classname} &lt;- function(${x}, ${...})  {
  ${args} &lt;- list(...)
  ${do something}
  ${object} &lt;- ${data from above}
  class(${object}) &lt;- "${classname}"
  return (${object})
}

# Creating object of class type
${my.object} &lt;- ${classname}(${x}, ${...})
# To access object attributes,  my.object$attribute.name</template>
        </entry>
        <entry>
            <trigger id="r">classmethod</trigger>
            <description>s3 class method</description>
            <template>${x} &lt;- structure(${data}, class = c("${classname1}", "${classname2}", "${classname3}"))

${gname} &lt;- function (${x}, ${...})  {
  if(is.null(attr(${x}, "class"))){
    ${do something}
  }
  else  UseMethod("${gname}", ${x})
}

${gname}.default &lt;- ${gname}(${x})

${gname}.${classname1} &lt;- function(${x}, ${...})  {
  # Only if class of an S3 object is a vector
  NextMethod()
}

${gname}.${classname2} &lt;- function(${x}, ${...})  {
  # First argument is an object of class classname
  ${args} &lt;- list(...)
  ${do something}
}

${gname}.${classname3} &lt;- function(${x}, ${...})  {
  # First argument is an object of class classname
  ${args} &lt;- list(...)
  ${do something}
}</template>
        </entry>
        <entry>
            <trigger id="r">concat</trigger>
            <description>Concatenating</description>
            <template>${list.ABC} &lt;- c(${list.A}, ${list.B}, ${list.C})
${vect.ABC} &lt;- c(${vect.A}, ${vect.B}, ${vect.C})</template>
        </entry>
        <entry>
            <trigger id="r">convention</trigger>
            <description>General items</description>
            <template># Do not terminate your lines with semicolons or use semicolons to 
# put more than one command on the same line

# An opening curly brace on same line; a closing curly brace on new line
if (is.null(ylim)) {
  ylim &lt;- c(0, 0.06)
}</template>
        </entry>
        <entry>
            <trigger id="r">createobject</trigger>
            <description>create object s3 class, same as setclass</description>
            <template>${s3.obj} &lt;- structure(${data}, class = ${vec.class.names})</template>
        </entry>
        <entry>
            <trigger id="r">cswitch</trigger>
            <description>Switch with char as EXPR, also has otherwise expr</description>
            <template>switch(EXPR = char, ${ch1} = ${expr_1}, ${ch2} = ${expr_2}, ${..} = ${...}, ${otherwise expr})</template>
        </entry>
        <entry>
            <trigger id="r">cvec</trigger>
            <description>Create character vector</description>
            <template>${vecName} &lt;- c( "${Str1}", "${Str2}", "${Str3}", ${...})</template>
        </entry>
        <entry>
            <trigger id="r">detach</trigger>
            <description>Detach either a data.frame or a package to search path</description>
            <template>detach(${packageName or data.frame})</template>
        </entry>
        <entry>
            <trigger id="r">deva</trigger>
            <description>delay evaluation of an expression</description>
            <template>${var} &lt;- quote(${expr})
eval(${var})</template>
        </entry>
        <entry>
            <trigger id="r">dframe</trigger>
            <description>data.frame made of vector columns. a data frame can have different data types for each column, while a matrix is all one data type</description>
            <template>${dataframe} &lt;- data.frame(${colName1} = ${vec1}, ${colName2} = ${vec2}, ${colName3} = ${vec3}, ${...})
# Access individual col
# ${dataframe}$${colName1}
# or use attach(${dataframe}) and 
# ${colName1}</template>
        </entry>
        <entry>
            <trigger id="r">diag</trigger>
            <description>diagonal of a matrix</description>
            <template>diag(${matrix, vector or 1D array}, ${nrow}, ${ncol})</template>
        </entry>
        <entry>
            <trigger id="r">dimget</trigger>
            <description>get dim attribute from a matrix, array or data frame</description>
            <template>dim(${r.object})</template>
        </entry>
        <entry>
            <trigger id="r">dimset</trigger>
            <description>set dim attribute to a vector</description>
            <template>dim(${vec}) &lt;- c(${x}, ${y}, ${z})</template>
        </entry>
        <entry>
            <trigger id="r">env</trigger>
            <description>Get the environment, fun: a ‘function’, a ‘formula’, or ‘NULL’</description>
            <template>environment(fun = ${NULL})

</template>
        </entry>
        <entry>
            <trigger id="r">facets</trigger>
            <description>ggplot facets</description>
            <template>facets = ${dim_x or .} ~ ${dim_y or .},</template>
        </entry>
        <entry>
            <trigger id="r">fcon</trigger>
            <description>file connection</description>
            <template>fcon &lt;- file("${file_name}", open = "${r|w|a}")
close(fcon)</template>
        </entry>
        <entry>
            <trigger id="r">fhelp</trigger>
            <description>Help on a function</description>
            <template>help("${FunctionName}")</template>
        </entry>
        <entry>
            <trigger id="r">for</trigger>
            <description>for loop</description>
            <template>for(${var} in ${seq})  {
  ${expr}
}</template>
        </entry>
        <entry>
            <trigger id="r">format</trigger>
            <description>format R objects</description>
            <template>format(${R_obj}, trim = ${FALSE}, justify = "${left, right, centre, none}")</template>
        </entry>
        <entry>
            <trigger id="r">fun</trigger>
            <description>Writing your own function</description>
            <template>${FunctionName} &lt;- function(${arg1}, ${arg2}, ${arg3}, ${...})  {
  ${args &lt;- list(...)}
  ${do something here}
  return (${something})
}</template>
        </entry>
        <entry>
            <trigger id="r">gddply</trigger>
            <description>Split data frame, apply function, and return results in a data frame</description>
            <template>ddply(${data.frame}, .${(var1, var2 etc)}, ${fun} ${= NULL})</template>
        </entry>
        <entry>
            <trigger id="r">geom</trigger>
            <description>ggplot2  geom options</description>
            <template>geom = " ${geom_type} ", </template>
        </entry>
        <entry>
            <trigger id="r">geom_</trigger>
            <description>ggplot2 geom_ options</description>
            <template>geom_${bar | point | smooth | boxplot | path | line | histogram | density | tile | quantile | contour}(${aes}, ${data.frame}, ${geom}, ${geom_params_type}, ${stat}, ${stat_params}, ${position})</template>
        </entry>
        <entry>
            <trigger id="r">geom_params</trigger>
            <description>ggplot2 geom_params</description>
            <template>geom_params = list( geom_params_type ),</template>
        </entry>
        <entry>
            <trigger id="r">geom_params_type</trigger>
            <description>ggplot2 geom options</description>
            <template>fill = "${color_name}", binwidth = "${number, only histogram}"</template>
        </entry>
        <entry>
            <trigger id="r">geom_type</trigger>
            <description>ggplot2 geom type</description>
            <template>bar | point | smooth | boxplot | path | line | histogram | density | tile | quantile | contour</template>
        </entry>
        <entry>
            <trigger id="r">getbody</trigger>
            <description>Get function body</description>
            <template>body(${function})</template>
        </entry>
        <entry>
            <trigger id="r">getclass</trigger>
            <description> get class type S3 or data type</description>
            <template>class(${s3.obj})</template>
        </entry>
        <entry>
            <trigger id="r">getslots</trigger>
            <description>get list of slots for S4 class</description>
            <template>getSlots("${className}")</template>
        </entry>
        <entry>
            <trigger id="r">gformals</trigger>
            <description>Get the formal arguments of a function</description>
            <template>formals(${function})</template>
        </entry>
        <entry>
            <trigger id="r">ggplot</trigger>
            <description>To create the plot object ourselves</description>
            <template>${plot.object} &lt;- ggplot(data = ${data.frame}, mapping = ${aes}) + ${glayer} + ${glayer} + ${opts} + ${labs} + ${lims}</template>
        </entry>
        <entry>
            <trigger id="r">ggplot_</trigger>
            <description>To create the plot object ourselves</description>
            <template>${plot.object} &lt;- ggplot(data = ${data.frame}, mapping = ${aes}) + ${geom_} + ${stat_} + ${opts}  + ${labs} + ${lims}</template>
        </entry>
        <entry>
            <trigger id="r">ggplot_functions</trigger>
            <description>ggplot function triggers</description>
            <template>${geom_ | stat_ | scale_ | coord_ | facet_ | position_ | theme_}</template>
        </entry>
        <entry>
            <trigger id="r">ggsave</trigger>
            <description>Save ggplot and  qplot</description>
            <template>ggsave("${filename.png}", width = ${ like 5}, height = ${ like 5}, dpi = ${ like 300})</template>
        </entry>
        <entry>
            <trigger id="r">glayer</trigger>
            <description>Arg for plotting the layer</description>
            <template>layer(
  data = ${data.frame}
  mapping = ${aes}
  ${geom}
  ${geom_params}
  ${stat}
  ${position}
)</template>
        </entry>
        <entry>
            <trigger id="r">glog</trigger>
            <description>ggplot qplot log</description>
            <template>log = "${x | y | xy}",</template>
        </entry>
        <entry>
            <trigger id="r">gmelt</trigger>
            <description>Melt an object into a form suitable for easy casting</description>
            <template>melt(${data}, id = c(${var_1}), ${var_2}))</template>
        </entry>
        <entry>
            <trigger id="r">gprint</trigger>
            <description>Render the ggplot object</description>
            <template>print(${ggplot_object})</template>
        </entry>
        <entry>
            <trigger id="r">grep</trigger>
            <description>get patter index if value FALSE </description>
            <template>grep(${pattern}, ${cvec}, ignore.case = ${FALSE}, value = ${FALSE}
       perl = ${FALSE}, fixed = ${FALSE}, useBytes = ${FALSE}, invert = ${FALSE})</template>
        </entry>
        <entry>
            <trigger id="r">grepl</trigger>
            <description>returns a logical vector</description>
            <template>grepl(${pattern}, ${cvec}, ignore.case = ${FALSE}, perl = ${FALSE}, fixed = ${FALSE},
            useBytes = ${FALSE})</template>
        </entry>
        <entry>
            <trigger id="r">gsub</trigger>
            <description>replacement of all matches</description>
            <template>gsub(${pattern}, ${replacement}, ${cvec}, ignore.case = ${FALSE}, 
         perl = ${FALSE}, fixed = ${FALSE}, useBytes = ${FALSE})</template>
        </entry>
        <entry>
            <trigger id="r">hdr</trigger>
            <description>R script header</description>
            <template>#! /usr/bin/env Rscript</template>
        </entry>
        <entry>
            <trigger id="r">if</trigger>
            <description>if condition</description>
            <template>if(cond)  {
  ${expr}
}</template>
        </entry>
        <entry>
            <trigger id="r">ifelse</trigger>
            <description>if-else control</description>
            <template>if(cond)  {
  ${expr}
}  
else {
  ${alt.expr}
}</template>
        </entry>
        <entry>
            <trigger id="r">inherits</trigger>
            <description>Indicates whether obj is inherites from given classes</description>
            <template>inherits(${s3.obj}, ${class.names})</template>
        </entry>
        <entry>
            <trigger id="r">init</trigger>
            <description>initialize S4 object</description>
            <template># Initialize function
setMethod(
  "initialize",
  signature(.Object = "${className}"),
  function (.Object, ${slot1}, ${slot2}, ${...}, ${slot3}, ${slot4})  {
    ${do something here}
    # callNextMethod for a call to superclass with matching arguments
    callNextMethod(
      .Object,
      ${slot1} = ${slot1}, 
      ${slot2} = ${slot2}, 
      ${...},
      ${slot3} = ${slot3},
      ${slot4} = ${slot4}
    )
  }
)
# Formal arguments are .Object and "..."
# .Object is  an S4 object and  "..." gives new slot values
# Use explicitly named slots ${slot1}, ${slot2}, to pass intilize value 
# to the superclass using callNextMethod

# Creating object
${obj} &lt;- new("className")
# Initializing object
${obj} &lt;- initialize(${obj}, ${slot1} = ${value1}, ${slot2} = ${value2}, ${..})</template>
        </entry>
        <entry>
            <trigger id="r">is.arr</trigger>
            <description>Is Array?</description>
            <template>is.array(${r.object})</template>
        </entry>
        <entry>
            <trigger id="r">is.char</trigger>
            <description>Is Character?</description>
            <template>is.character(${r.object})</template>
        </entry>
        <entry>
            <trigger id="r">is.data</trigger>
            <description>Is data.frame?</description>
            <template>is.data.frame(${r.object})</template>
        </entry>
        <entry>
            <trigger id="r">is.mat</trigger>
            <description>Is Matrix?</description>
            <template>is.matrix(${r.object})</template>
        </entry>
        <entry>
            <trigger id="r">is.na</trigger>
            <description>Is NA?</description>
            <template>is.na(${atomic.vec})</template>
        </entry>
        <entry>
            <trigger id="r">is.nu</trigger>
            <description>Is NULL?</description>
            <template>is.null(${r.object})</template>
        </entry>
        <entry>
            <trigger id="r">is.num</trigger>
            <description>Is Numeric?</description>
            <template>is.numeric(${r.object})</template>
        </entry>
        <entry>
            <trigger id="r">iswitch</trigger>
            <description>Switch with integer index as EXPR</description>
            <template>switch(EXPR = int, ${expr_1}, ${expr_2}, ${expr_3}, ${...})</template>
        </entry>
        <entry>
            <trigger id="r">labs</trigger>
            <description>ggplot2 labels</description>
            <template>labs(x = "x-axis", y = "y-axis", colour = "color", size = "size")</template>
        </entry>
        <entry>
            <trigger id="r">lastplot</trigger>
            <description>last ggplot</description>
            <template>last_plot() + ${ggplot_functions}</template>
        </entry>
        <entry>
            <trigger id="r">ldir</trigger>
            <description>List files stored in the directory</description>
            <template>dir("${path/dirName}")</template>
        </entry>
        <entry>
            <trigger id="r">len</trigger>
            <description>length, you can change it by padding or discarding element</description>
            <template>length(${r.object})
# length(${r.object}) &lt; value</template>
        </entry>
        <entry>
            <trigger id="r">lfile</trigger>
            <description>List files in dir</description>
            <template>list.files("{path/to/dir}")</template>
        </entry>
        <entry>
            <trigger id="r">library</trigger>
            <description>Loading a package </description>
            <template>library(${package.name})</template>
        </entry>
        <entry>
            <trigger id="r">libs</trigger>
            <description>libs required</description>
            <template>library(RCurl)
library(ggplot2)
library(lattice)
library(stats)
library(utils)
library(tools)
library(foreign)
library(Matrix)
library(rjson)
library(rJava)
library(XML)
library(tm)
library(ts)
library(methods)
# 'require' for use inside other  functions
</template>
        </entry>
        <entry>
            <trigger id="r">lic</trigger>
            <description>GPL License</description>
            <template># Copyright © 2010-2011 ${Abhishek Tiwari} (abhishek@abhishek-tiwari.com)
#
# This file is part of ${ProjectName}.
#
# Files included in this package ${ProjectName} are copyrighted freeware
# distributed under the terms and conditions as specified in file LICENSE.
${cursor}</template>
        </entry>
        <entry>
            <trigger id="r">lims</trigger>
            <description>ggplot2 limiting axis</description>
            <template>xlim(${x1}, ${x2}) + ylim(${y1}, ${y2})</template>
        </entry>
        <entry>
            <trigger id="r">list</trigger>
            <description>Constructing List </description>
            <template>${lst} &lt;- list(${name1} = ${object1}, ${name2} = ${object2}, ${...}, ${name_m} = ${object_m})
# Components can accessed either ${lst$name_m}, ${lst[["name_m"]]} or ${lst[[m]]}
# ${lst[[m]][n]} to access elements inside the components</template>
        </entry>
        <entry>
            <trigger id="r">load</trigger>
            <description>Load saved R objects from disk</description>
            <template>load("${name}.rdata")</template>
        </entry>
        <entry>
            <trigger id="r">loadp</trigger>
            <description>Load a package from the command line</description>
            <template>library(package = ${packageName})</template>
        </entry>
        <entry>
            <trigger id="r">lower</trigger>
            <description>convert upper-case characters in lower</description>
            <template>tolower(${x})</template>
        </entry>
        <entry>
            <trigger id="r">ls</trigger>
            <description>Return the vector of object names  in a given environment</description>
            <template>${vec} &lt;- ls(${myenv})
# ls() for local variables</template>
        </entry>
        <entry>
            <trigger id="r">lstrip</trigger>
            <description>strip leading space</description>
            <template>sub("^ +", "", ${your_string})</template>
        </entry>
        <entry>
            <trigger id="r">lvec</trigger>
            <description>Create a logical vector</description>
            <template>${lvec} &lt;- ${nvec} ${&lt;=&gt;} ${N}</template>
        </entry>
        <entry>
            <trigger id="r">match</trigger>
            <description>returns a vector of the positions of (first) matches</description>
            <template>match(${value to match}, ${vec}, nomatch = NA_integer_, incomparables = NULL)</template>
        </entry>
        <entry>
            <trigger id="r">matchl</trigger>
            <description>logical vector indicating if there is a match or not</description>
            <template>${value to match} %in% ${vec}</template>
        </entry>
        <entry>
            <trigger id="r">matrix</trigger>
            <description>matrix</description>
            <template>matrix(data = ${vec}, nrow = ${1}, ncol = ${1}, byrow = ${FALSE},
            dimnames = ${NULL})</template>
        </entry>
        <entry>
            <trigger id="r">methods</trigger>
            <description>List of all the implementations of generic function</description>
            <template>methods(${gname})</template>
        </entry>
        <entry>
            <trigger id="r">naming</trigger>
            <description>Naming convention help</description>
            <template># Variable names should have all lower case letters and words separated with dots (.) 
variable.name

# Function names have initial capital letters
FunctionName

# Constants are named like functions but with an initial k.
kConstantName

# FIle names with words seperated with underscores
my_filename.R

# Unit tests should go in a separate file named 
filename_unittest.R</template>
        </entry>
        <entry>
            <trigger id="r">nchar</trigger>
            <description>return number of characters</description>
            <template>nchar(${cvec}, type = "${chars}", allowNA = ${FALSE})</template>
        </entry>
        <entry>
            <trigger id="r">ncol</trigger>
            <description>Number of columns # x a vector, array or data frame</description>
            <template>ncol(${x})</template>
        </entry>
        <entry>
            <trigger id="r">new</trigger>
            <description>new S4 object</description>
            <template># To create new object
${obj} &lt;- new("${className}", ${slot1} = ${value1}, ${slot2} = ${value2}, ${..})
# To access slot values ${obj}@${slot1}, ${obj}@${slot2}, .. Otherwise
# To access slot values slot(${obj}, "${slot1}"), slot(${obj}, "${slot1}"), ..</template>
        </entry>
        <entry>
            <trigger id="r">newenv</trigger>
            <description>New environment</description>
            <template>${myenv} &lt;- new.env(${parent = baseenv() | emptyenv() | parent.frame()})</template>
        </entry>
        <entry>
            <trigger id="r">next</trigger>
            <description>next  apply only to the innermost of nested loops.</description>
            <template>next</template>
        </entry>
        <entry>
            <trigger id="r">nrow</trigger>
            <description>Number of rows # x a vector, array or data frame</description>
            <template>nrow(${x})</template>
        </entry>
        <entry>
            <trigger id="r">nseq</trigger>
            <description>Sequence generation</description>
            <template>${vec} &lt;- c(seq(from = ${N1}, to = ${N1}, by = ${Diff}))</template>
        </entry>
        <entry>
            <trigger id="r">nseq:</trigger>
            <description>Sequence generation</description>
            <template>${vec} &lt;- c(${n1}:${n2}, ${n3}:${n4}, ${n5}:${n6}, ${..})</template>
        </entry>
        <entry>
            <trigger id="r">nseql</trigger>
            <description>Sequence generation</description>
            <template>${vec} &lt;- c(seq(from = ${N1}, to = ${N1}, length.out = ${length} ))</template>
        </entry>
        <entry>
            <trigger id="r">nvec</trigger>
            <description>Create numeric vector</description>
            <template>${vec.name} &lt;- c(${N1}, ${N2}, ${N3}, ${....})</template>
        </entry>
        <entry>
            <trigger id="r">nvecr</trigger>
            <description>Vector of random numbers with normal distribution</description>
            <template>${nvec} &lt;- c(stats::rnorm( ${N}, ${mean}, ${sd}))</template>
        </entry>
        <entry>
            <trigger id="r">objects</trigger>
            <description>Return the vector of object names  in a given environment</description>
            <template>${vec} &lt;- objects(${myenv})
# objects() for local variables</template>
        </entry>
        <entry>
            <trigger id="r">opts</trigger>
            <description>ggplot options</description>
            <template>opts(title = "${Plot title}", ${theme_options}, ${keep = "legend_box"})</template>
        </entry>
        <entry>
            <trigger id="r">paste</trigger>
            <description>R objects converted to character vectors and one or more R objects, to be converted to character vectors and concatenated</description>
            <template>paste(${R_obj1}, ${R_obj2}, ${...}, sep = " ", collapse = NULL)</template>
        </entry>
        <entry>
            <trigger id="r">penv</trigger>
            <description>Parent environment of its argument</description>
            <template>parent.env(${myenv})</template>
        </entry>
        <entry>
            <trigger id="r">phelp</trigger>
            <description>Help for packages</description>
            <template>help(package = ${packageName})</template>
        </entry>
        <entry>
            <trigger id="r">position</trigger>
            <description>ggplot position</description>
            <template>position = "${dodge | fill | identity | jitter | stack}",</template>
        </entry>
        <entry>
            <trigger id="r">print</trigger>
            <description>Print something</description>
            <template>print(${some.name},${....})</template>
        </entry>
        <entry>
            <trigger id="r">qhisto</trigger>
            <description>ggplot qplot</description>
            <template>qplot(${dim_1}, data = ${data.frame}, fill = ${dim_i}, binwidth = ${some_number}, facets = ${dim_x or .} ~ ${dim_y or .}, main = "${plot title}")</template>
        </entry>
        <entry>
            <trigger id="r">qplot</trigger>
            <description>ggplot2 qplot</description>
            <template>qplot(${dim_1}, ${dim_2} ${= NULL}, ${dim_3} ${= NULL}, ${...}, colour = ${dim_i}, shape = ${dim_j}, data = ${data.frame}, ${facets} ${geom} ${stat} ${xlim} ${ylim} ${glog} main = "${plot title}", xlab = "${x-axis}", ylab = "${y-axis}") + ${ggplot_functions}</template>
        </entry>
        <entry>
            <trigger id="r">rbind</trigger>
            <description>combine vectors into matrices in a row by row</description>
            <template>rbind(${vec1 or matrix1}, ${vec2 or matrix2}, ${...}, deparse.level = ${1})</template>
        </entry>
        <entry>
            <trigger id="r">rcsv</trigger>
            <description>read csv</description>
            <template>read.csv(${file_name}, header = ${TRUE|FALSE}, sep = ",", quote="${\"'}", dec="${.}",
                fill = TRUE, comment.char="", ${...})</template>
        </entry>
        <entry>
            <trigger id="r">rcsv2</trigger>
            <description>read csv2</description>
            <template>read.csv2(${file_name}, header = ${TRUE|FALSE}, sep = ";", quote="${\"'}", dec="${.}",
                fill = TRUE, comment.char="", ${...})</template>
        </entry>
        <entry>
            <trigger id="r">rdelim</trigger>
            <description>read delim</description>
            <template>read.delim(${file_name}, header = ${TRUE|FALSE}, sep = "\t", quote="${\"'}", dec="${.}",
                fill = TRUE, comment.char="", ${...})</template>
        </entry>
        <entry>
            <trigger id="r">readfile</trigger>
            <description>read a file using connection</description>
            <template>fcon &lt;- file("${file_name}", open = "${r}")
readLines(fcon, n = ${-1L}, ok = ${TRUE}, warn = ${TRUE}, encoding = "${unknown}")
close(fcon)</template>
        </entry>
        <entry>
            <trigger id="r">readline</trigger>
            <description>readLines</description>
            <template>readLines(${fcon or ucon}, n = ${-1L}, ok = ${TRUE}, warn = ${TRUE}, encoding = "${unknown}")</template>
        </entry>
        <entry>
            <trigger id="r">repeat</trigger>
            <description>repeat</description>
            <template>repeat ${expr}</template>
        </entry>
        <entry>
            <trigger id="r">reqp</trigger>
            <description>Load a package from within a function</description>
            <template>require(package = ${packageName})</template>
        </entry>
        <entry>
            <trigger id="r">require</trigger>
            <description>require a package</description>
            <template>require(${package.name})</template>
        </entry>
        <entry>
            <trigger id="r">rfile</trigger>
            <description>Remove a file</description>
            <template>file.remove("${path/file_name}")</template>
        </entry>
        <entry>
            <trigger id="r">rhelp</trigger>
            <description>Help on a topic</description>
            <template>help(${topic})</template>
        </entry>
        <entry>
            <trigger id="r">rifelse</trigger>
            <description />
            <template>ifelse(${test-objects}, ${yes-objects}, ${no-objects})

# ifelse(c(TRUE, FALSE, TRUE, FALSE), c(1, 2, 3, 4), c(5, 6, 7, 8))
# 1 6 3 8
</template>
        </entry>
        <entry>
            <trigger id="r">rstrip</trigger>
            <description>strip trailing space</description>
            <template>sub(" +$", "", ${your_string})</template>
        </entry>
        <entry>
            <trigger id="r">rtable</trigger>
            <description>read table</description>
            <template>read.table(${file_name}, header = ${TRUE|FALSE}, sep = "${\t,;}", quote="${\"'}", dec="${.}",
                fill = TRUE, comment.char="", ${...})</template>
        </entry>
        <entry>
            <trigger id="r">rvec</trigger>
            <description>Repeat vector</description>
            <template>rep(x = ${N1}:${N1}, times = ${N3})
rep(x = ${N1}:${N1}, times = ${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">sample</trigger>
            <description>Random Samples and Permutations</description>
            <template>sample(${vec}, ${size}, ${replace = FALSE}, ${prob = NULL})

# Should sampling be with replacement? TRUE oR FALSE
# sample(vec [vec &lt;=&gt;  something])</template>
        </entry>
        <entry>
            <trigger id="r">save</trigger>
            <description>Save R objects to disk</description>
            <template>save(${obj1, obj2, ..}, file = "${name}.rdata")</template>
        </entry>
        <entry>
            <trigger id="r">scale_</trigger>
            <description>ggplot scale</description>
            <template>scale_${alpha | continuous | gradient | gradient2 | shape | size | date | linetype | identity}(${garg})</template>
        </entry>
        <entry>
            <trigger id="r">setbody</trigger>
            <description>Set function body</description>
            <template>body(${function}) &lt;- expression(${new.expr})</template>
        </entry>
        <entry>
            <trigger id="r">setclass</trigger>
            <description>set the class s3 type</description>
            <template>${s3.obj} &lt;- ${data}
class(${s3.obj}) &lt; - ${vec.class.names}
# OR
attr(${s3.obj}, "class") &lt;- ${vec.class.names}</template>
        </entry>
        <entry>
            <trigger id="r">setclass4</trigger>
            <description>Set or create class of type S4</description>
            <template>setClass(
  "${className}", 
  representation(
    ${slot1} = " slot.type ",
    ${slot2} = " slot.type ",
    ${..}
  ),
  prototype(
    ${slot1} = ${defult.value1},
    ${slot2} = ${defult.value2},
    ${..}
  ),
  validity = ${validation.function},
  contains = c("${superclass1}", "${superclass2}")
)</template>
        </entry>
        <entry>
            <trigger id="r">setmethod</trigger>
            <description>setMethod for S4 objects</description>
            <template>setMethod(
  "${generic.function}",
  signature(${slot1} = "${className1}", ${slot2} = "${className2}", ${..}),
  function (${slot1}, ${slot2}, ${...})  {
    ${do something here}
  }
)
# Class names can formal, basic or special class names "ANY" &amp; "missing"
# method.skeleton recommended way to generate a  skeleton of the call to ‘setMethod’</template>
        </entry>
        <entry>
            <trigger id="r">setvalidity</trigger>
            <description>setValidity for S4 object creation</description>
            <template>setValidity("${className}", ${validation.function})</template>
        </entry>
        <entry>
            <trigger id="r">sformals</trigger>
            <description>Set the formal arguments of a function</description>
            <template>${myfor} &lt;- formals(${function})
${myfor}$${arg} &lt;- ${value}
formals(${function}) &lt;- ${myfor}</template>
        </entry>
        <entry>
            <trigger id="r">slot.type</trigger>
            <description>slot.type for s4 class</description>
            <template>numeric | character | data.frame | matrix | complex | call </template>
        </entry>
        <entry>
            <trigger id="r">space</trigger>
            <description>Space &amp; indentation convention</description>
            <template># Space between comment and hash

# Short comments can be placed after code preceded 
# by two spaces, #, and then one space.
kMax = 30  # Maximum rate constant

# When indenting your code, use two spaces

# Line length 80 characters

# Space around binary operators (=, +, -, etc.)

# Space after comma

# Space before left parenthesis, except in function call
if (my.var &gt; 10)

# Extra spacing (i.e., more than one space in a row) is okay if it
# improves alignment of equals signs or arrows (&lt;-).</template>
        </entry>
        <entry>
            <trigger id="r">split</trigger>
            <description>string split</description>
            <template>strsplit(${cvec}, ${split regex}, fixed = ${FALSE}, perl = ${FALSE}, useBytes = ${FALSE})</template>
        </entry>
        <entry>
            <trigger id="r">stat</trigger>
            <description>ggplot stat</description>
            <template>stat = " ${stat_type} ",</template>
        </entry>
        <entry>
            <trigger id="r">stat_</trigger>
            <description>ggplot2 stat_ options</description>
            <template>stat_${abline | bin | smooth | boxplot | function | summary | density | identity | quantile | contour}(${aes}, ${data.frame}, ${geom}, ${geom_params}, ${stat}, ${stat_params_type}, ${position})</template>
        </entry>
        <entry>
            <trigger id="r">stat_type</trigger>
            <description>ggplot2 stat type</description>
            <template>abline | bin | smooth | boxplot | function | summary | density | identity | quantile | contour</template>
        </entry>
        <entry>
            <trigger id="r">stop</trigger>
            <description>stopifnot</description>
            <template>stopifnot(${logical.expr1}, ${logical.expr1}, ${...})
# Value ‘NULL’ if all statements in ‘...’ are ‘TRUE’.</template>
        </entry>
        <entry>
            <trigger id="r">strip</trigger>
            <description>both strip</description>
            <template>gsub("(^ +)|( +$)", "", ${your_string})</template>
        </entry>
        <entry>
            <trigger id="r">sub</trigger>
            <description>replacement of first matche</description>
            <template>sub(${pattern}, ${replacement}, ${cvec}, ignore.case = ${FALSE}, 
         perl = ${FALSE}, fixed = ${FALSE}, useBytes = ${FALSE})</template>
        </entry>
        <entry>
            <trigger id="r">subplot</trigger>
            <description>ggplot subplot snippet</description>
            <template>Layout &lt;- grid.layout( nrow = ${r}, ncol = ${c}, 
              widths  = unit(c(${w1}, ${..}), c("${cm | null}", "${..}")) 
              heights = unit(c(${h1}, ${..}), c("${cm | null}", "${..}")) 
              )

vplayout &lt;- function (...) {
 grid.newpage()
 pushViewport(viewport(layout= Layout))
}

subplot &lt;- function(x, y) viewport(layout.pos.row=x, layout.pos.col=y)

vplayout()
legend &lt;- ${plot1} + opts(keep= "legend_box")
print(${plot1}, vp=subplot(2,1))
print(${plot2}, vp=subplot(1,1))
print(${plot3}, vp=subplot(2,2))
print(${legend},vp=subplot(1,2))</template>
        </entry>
        <entry>
            <trigger id="r">substr</trigger>
            <description>substr</description>
            <template>substr(${cvec}, ${start}, ${stop})</template>
        </entry>
        <entry>
            <trigger id="r">substring</trigger>
            <description>substring compatible with S</description>
            <template>substring(${cvec}, ${first}, ${last = 1000000L})</template>
        </entry>
        <entry>
            <trigger id="r">substringv</trigger>
            <description>substring value compatible with S</description>
            <template>substring(${cvec}, ${first}, ${last = 1000000L}) &lt;- ${another cvec}</template>
        </entry>
        <entry>
            <trigger id="r">substrv</trigger>
            <description>substr value</description>
            <template>substr(${cvec}, ${start}, ${stop}) &lt;- ${another cvec}</template>
        </entry>
        <entry>
            <trigger id="r">summary</trigger>
            <description>Summary of R object, data structure or anythin</description>
            <template>summary(${obj})</template>
        </entry>
        <entry>
            <trigger id="r">theme</trigger>
            <description>set ggplot theme </description>
            <template>theme_set(${theme_bw() | theme_grey()})</template>
        </entry>
        <entry>
            <trigger id="r">theme_</trigger>
            <description>ggplot theme options</description>
            <template>${bw | grey | text | line | segment | rect | blank}(${..})</template>
        </entry>
        <entry>
            <trigger id="r">theme_options</trigger>
            <description>ggplot  theme options</description>
            <template>plot.title = theme_text(size = ${20}, colour = "${red}"), axis.title.x = theme_text(${..}), axis.title.y = theme_text(${..}), plot.background = theme_rect(size = ${2}, colour = "${red}"), panel.background = theme_rect(${..}), plot.background = theme_rect(${..}), </template>
        </entry>
        <entry>
            <trigger id="r">trans</trigger>
            <description>transpose of matrix or dataframe</description>
            <template>t(${matrix or data.frame})</template>
        </entry>
        <entry>
            <trigger id="r">transform</trigger>
            <description>Transform an Object, for Example a Data Frame</description>
            <template>transform(${data.frame}, ${change a column, Ozone = Ozone * 3}, ${add a new column, new = Ozone * 4})</template>
        </entry>
        <entry>
            <trigger id="r">transform1</trigger>
            <description>Transform an Object, for Example a Data Frame</description>
            <template>attach ${data.frame}
transform(${column1}, ${change column1, Ozone = Ozone * 3}, ${column2}, ${change column2, new = Ozone * 4})</template>
        </entry>
        <entry>
            <trigger id="r">translate</trigger>
            <description>like perl translate, translates each character in string</description>
            <template>chartr(${old}, ${new}, ${cvec})</template>
        </entry>
        <entry>
            <trigger id="r">try1</trigger>
            <description>Exception handling</description>
            <template>tryCatch({
  ${your main code here}
}, error = function(error) {
  ${details about error here}
})</template>
        </entry>
        <entry>
            <trigger id="r">try2</trigger>
            <description>Exception handling</description>
            <template>tryCatch({
  ${your main code here}
}, error = function(error) {
  ${details about error here}
}, finally = {
  ${clean up work here, reverting changes}
})</template>
        </entry>
        <entry>
            <trigger id="r">ucon</trigger>
            <description>get url using connection</description>
            <template>fcon &lt;- url("${url}", open = "${r|w|a}")
close(fcon)</template>
        </entry>
        <entry>
            <trigger id="r">unclass</trigger>
            <description>returns (a copy of) its argument  with its class  attribute removed</description>
            <template>unclass(${s3.obj})</template>
        </entry>
        <entry>
            <trigger id="r">unlist</trigger>
            <description>convert list into vector</description>
            <template>${vec} &lt;- unlist(${list})</template>
        </entry>
        <entry>
            <trigger id="r">upper</trigger>
            <description>convert lower-case characters in upper</description>
            <template>toupper(${x})</template>
        </entry>
        <entry>
            <trigger id="r">valid</trigger>
            <description>check if an object is valid or not</description>
            <template>validObject(${object}, test = ${FALSE}, complete = ${FALSE})</template>
        </entry>
        <entry>
            <trigger id="r">vfun</trigger>
            <description>Validation function S4 objects</description>
            <template># Validation function, access the slot values by object@${slot}

${validation.function} &lt;- function(object)  {
  if(${valid cond}) TRUE
  else paste("${suggest error}")
}

# Or Try this one

${validation.function} &lt;- function(object)  {
  errors &lt;- character()
  if(${invalid cond1}) {
    msg &lt;- paste("${suggest error}")
    errors &lt;- c(errors, msg)
  }
  
  if(${invalid cond2}) {
    msg &lt;- paste("${suggest error}")
    errors &lt;- c(errors, msg)
  }
  
  if (length(errors) == 0) TRUE else errors
  }

# validity tests are not applied recursively by default 
# validity tests are not applied we modify  slots directly</template>
        </entry>
        <entry>
            <trigger id="r">vmax</trigger>
            <description>Max of a vector</description>
            <template>max(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vmean</trigger>
            <description>Mean of a vector</description>
            <template>mean(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vmin</trigger>
            <description>Min of a vector</description>
            <template>min(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vsd</trigger>
            <description>Standard deviation of a vector</description>
            <template>sd(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vsum</trigger>
            <description>Sum of vector elements</description>
            <template>sum(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vsummury</trigger>
            <description>Summary of a vector</description>
            <template>summary(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vvar</trigger>
            <description>Variance of a vector</description>
            <template>var(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">wcsv</trigger>
            <description>write csv</description>
            <template>write.csv(${matrix or data.frame}, file = "${path/to/filename}", 
           append = ${FALSE}, quote = ${TRUE}, sep = "${,}",
           eol = "\n", na = "NA", dec = ".", row.names = ${TRUE},
           col.names = ${TRUE|NA}, qmethod = c(${"escape", "double")})</template>
        </entry>
        <entry>
            <trigger id="r">wcsv2</trigger>
            <description>write csv2</description>
            <template>write.csv2(${matrix or data.frame}, file = "${path/to/filename}", 
           append = ${FALSE}, quote = ${TRUE}, sep = "${;}",
           eol = "\n", na = "NA", dec = ",", row.names = ${TRUE},
           col.names = ${TRUE|NA}, qmethod = c(${"escape", "double")})</template>
        </entry>
        <entry>
            <trigger id="r">wdir</trigger>
            <description>Get current working dir</description>
            <template>getwd()</template>
        </entry>
        <entry>
            <trigger id="r">while</trigger>
            <description>while loop</description>
            <template>while(${cond})  {
  ${expr}
}</template>
        </entry>
        <entry>
            <trigger id="r">writefile</trigger>
            <description>write file using connection</description>
            <template>fcon &lt;- file("file_name", open = "w|a")
writeLines(fcon, n = -1L, ok = TRUE, warn = TRUE, encoding = "unknown")
cat(${R_obj1}, ${R_obj2}, file = fcon, sep = "\n")
close(fcon)</template>
        </entry>
        <entry>
            <trigger id="r">writeline</trigger>
            <description>writeLines</description>
            <template>writeLines(${text}, ${fcon}, sep = "${\n}", useBytes = ${FALSE})</template>
        </entry>
        <entry>
            <trigger id="r">wtable</trigger>
            <description>write table</description>
            <template>write.table(${matrix or data.frame}, file = "${path/to/filename}", 
           append = ${FALSE}, quote = ${TRUE}, sep = "${ ,;}",
           eol = "\n", na = "NA", dec = ".", row.names = ${TRUE},
           col.names = ${TRUE|NA}, qmethod = c(${"escape", "double")})</template>
        </entry>
        <entry>
            <trigger id="r">xlim</trigger>
            <description>ggplot plot range xlim</description>
            <template>xlim = c(${x1},${x2}),</template>
        </entry>
        <entry>
            <trigger id="r">ylim</trigger>
            <description>ggplot plot range ylim</description>
            <template>ylim = c(${y1},${y2}),</template>
        </entry>
    </snippet>
</scribes>
