<?xml version='1.0' encoding='UTF-8'?>
<scribes version="0.1">
    <snippet>
        <entry>
            <trigger id="r">arr</trigger>
            <description>Array function</description>
            <template>${myarray} &lt;- array(${data_vector}, ${dimension_vector})
#  x &lt;- array(1:20, dim=c(4,5)) </template>
        </entry>
        <entry>
            <trigger id="r">attach</trigger>
            <description>Attaching a data frame (or list) to the search path</description>
            <template>attach(${data.frame or list})</template>
        </entry>
        <entry>
            <trigger id="r">cdir</trigger>
            <description>Create a dir</description>
            <template>dir.create("${path/dirName}")</template>
        </entry>
        <entry>
            <trigger id="r">cfile</trigger>
            <description>Create a file</description>
            <template>file.create("${path/fileName}")</template>
        </entry>
        <entry>
            <trigger id="r">concat</trigger>
            <description>Concatenating</description>
            <template>${list.ABC} &lt;- c(${list.A}, ${list.B}, ${list.C})
${vect.ABC} &lt;- c(${vect.A}, ${vect.B}, ${vect.C})</template>
        </entry>
        <entry>
            <trigger id="r">convention</trigger>
            <description>General items</description>
            <template># Do not terminate your lines with semicolons or use semicolons to 
# put more than one command on the same line

# An opening curly brace on same line; a closing curly brace on new line
if (is.null(ylim)) {
  ylim &lt;- c(0, 0.06)
}</template>
        </entry>
        <entry>
            <trigger id="r">cvec</trigger>
            <description>Create character vector</description>
            <template>${vecName} &lt;- c( "${Str1}", "${Str2}", "${Str3}", ${...})</template>
        </entry>
        <entry>
            <trigger id="r">detach</trigger>
            <description>Detach either a data.frame or a package to search path</description>
            <template>detach(${packageName or data.frame})</template>
        </entry>
        <entry>
            <trigger id="r">dframe</trigger>
            <description>data.frame made of vector columns. a data frame can have different data types for each column, while a matrix is all one data type</description>
            <template>${dataframe} &lt;- data.frame(${colName1} = ${vec1}, ${colName2} = ${vec2}, ${colName3} = ${vec3}, ${...})
# Access individual col
# ${dataframe}$${colName1}
# or use attach(${dataframe}) and 
# ${colName1}</template>
        </entry>
        <entry>
            <trigger id="r">dim</trigger>
            <description>dim attribute</description>
            <template>dim(${vec}) &lt;- c(${x}, ${y}, ${z})
# A vector can be used by R as an array only if it has a dimension vector as its dim attribute.
# vec &lt;- c(1:36)
# dim(vec) &lt;- c(3, 3, 4)</template>
        </entry>
        <entry>
            <trigger id="r">fhelp</trigger>
            <description>Help on a function</description>
            <template>help("${FunctionName}")</template>
        </entry>
        <entry>
            <trigger id="r">fun</trigger>
            <description>Writing your own function</description>
            <template>${FunctionName} &lt;- function(${arg1}, ${arg2}, ${arg3}, ${...})  {
  # ${Description of function, what is does}
  # 
  # Args:
  #   ${arg1}: ${argument details}
  #   ${arg2}: ${argument details}
  #   ${arg2}: ${argument details}
  #   ${arg3}: ${argument details}
  #
  # Returns:
  #   ${return details}
  
  ${do something here}

  return (${something})
}
</template>
        </entry>
        <entry>
            <trigger id="r">gddply</trigger>
            <description>Split data frame, apply function, and return results in a data frame</description>
            <template>ddply(${data.frame}, .${(var1, var2 etc)}, ${fun} ${= NULL})</template>
        </entry>
        <entry>
            <trigger id="r">ggsave</trigger>
            <description>Save ggplot and  qplot</description>
            <template>ggsave("${filename.png}", width = ${ like 5}, height = ${ like 5}, dpi = ${ like 300})</template>
        </entry>
        <entry>
            <trigger id="r">gmelt</trigger>
            <description>Melt an object into a form suitable for easy casting</description>
            <template>melt(${data}, id = c(${var_1}), ${var_2}))</template>
        </entry>
        <entry>
            <trigger id="r">gprint</trigger>
            <description>Render the ggplot object</description>
            <template>print(${ggplot_object})</template>
        </entry>
        <entry>
            <trigger id="r">ldir</trigger>
            <description>List files stored in the directory</description>
            <template>dir("${path/dirName}")</template>
        </entry>
        <entry>
            <trigger id="r">lfile</trigger>
            <description>List files in dir</description>
            <template>list.files("{path/to/dir}")</template>
        </entry>
        <entry>
            <trigger id="r">lic</trigger>
            <description>GPL License</description>
            <template># Copyright Â© 2010 ${Abhishek Tiwari} (abhishek@abhishek-tiwari.com)
#
# This file is part of ${ProjectName}.
#
# Files included in this package ${ProjectName} are copyrighted freeware
# distributed under the terms and conditions as specified in file LICENSE.
${cursor}</template>
        </entry>
        <entry>
            <trigger id="r">list</trigger>
            <description>Constructing List </description>
            <template>${lst} &lt;- list(${name1} = ${object1}, ${name2} = ${object2}, ${name3} = ${object3},  ${...}, ${name_m} = ${object_m})
# An R list is an object consisting of an ordered collection of objects known as its components.
# Components can accessed either ${lst$name_m}, ${lst[["name_m"]]} or ${lst[[m]]}
# ${lst[[m]][n]} to access elements inside the components</template>
        </entry>
        <entry>
            <trigger id="r">load</trigger>
            <description>Load saved R objects from disk</description>
            <template>load("${name}.rdata")</template>
        </entry>
        <entry>
            <trigger id="r">loadp</trigger>
            <description>Load a package from the command line</description>
            <template>library(package = ${packageName})</template>
        </entry>
        <entry>
            <trigger id="r">lvec</trigger>
            <description>Create a logical vector</description>
            <template>${lvec} &lt;- ${nvec} ${&lt;=&gt;} ${N}</template>
        </entry>
        <entry>
            <trigger id="r">naming</trigger>
            <description>Naming convention help</description>
            <template># Variable names should have all lower case letters and words separated with dots (.) 
variable.name

# Function names have initial capital letters
FunctionName

# Constants are named like functions but with an initial k.
kConstantName

# FIle names with words seperated with underscores
my_filename.R

# Unit tests should go in a separate file named 
filename_unittest.R</template>
        </entry>
        <entry>
            <trigger id="r">nseq</trigger>
            <description>Sequence generation</description>
            <template>${vec} &lt;- c(seq(from = ${N1}, to = ${N1}, by = ${Diff}))</template>
        </entry>
        <entry>
            <trigger id="r">nseq:</trigger>
            <description>Sequence generation</description>
            <template>${vec} &lt;- c(${n1}:${n2}, ${n3}:${n4}, ${n5}:${n6}, ${..})</template>
        </entry>
        <entry>
            <trigger id="r">nseql</trigger>
            <description>Sequence generation</description>
            <template>${vec} &lt;- c(seq(from = ${N1}, to = ${N1}, length.out = ${length} ))</template>
        </entry>
        <entry>
            <trigger id="r">nvec</trigger>
            <description>Create numeric vector</description>
            <template>${vec.name} &lt;- c(${N1}, ${N2}, ${N3}, ${....})</template>
        </entry>
        <entry>
            <trigger id="r">nvecr</trigger>
            <description>Vector of random numbers with normal distribution</description>
            <template>${nvec} &lt;- c(stats::rnorm( ${N}, ${mean}, ${sd}))</template>
        </entry>
        <entry>
            <trigger id="r">phelp</trigger>
            <description>Help for packages</description>
            <template>help(package = ${packageName})</template>
        </entry>
        <entry>
            <trigger id="r">print</trigger>
            <description>Print something</description>
            <template>print(${some.name})</template>
        </entry>
        <entry>
            <trigger id="r">qhisto</trigger>
            <description>ggplot qplot</description>
            <template>qplot(${dim_1}, data = ${data.frame}, fill = ${dim_i}, binwidth = ${some_number}, facets = ${dim_x or .} ~ ${dim_y or .}, main = "${plot title}")</template>
        </entry>
        <entry>
            <trigger id="r">qplot1</trigger>
            <description>ggplot2 qplot</description>
            <template>qplot(${dim_1}, ${dim_2} ${= NULL}, ${dim_3} ${= NULL}, ${...}, colour = ${dim_i}, shape = ${dim_j}, data = ${data.frame}, facets = ${dim_x or .} ~ ${dim_y or .}, geom = "${auto | point | smooth | boxplot | path | line | histogram| density}", main = "${plot title}")</template>
        </entry>
        <entry>
            <trigger id="r">qplot2</trigger>
            <description>ggplot2 qplot</description>
            <template>attach(${data.frame})
qplot(${dim_1}, ${dim_2} ${= NULL}, ${dim_3} ${= NULL}, ${...}, colour = ${dim_i}, shape = ${dim_j}, facets = ${dim_x or .} ~ ${dim_y or .}, geom = "${auto | point | smooth | boxplot | path | line | histogram| density}", main = "${plot title}")</template>
        </entry>
        <entry>
            <trigger id="r">qplot3</trigger>
            <description>ggplot2 qplot</description>
            <template>qplot(${dim_1}, ${dim_2} ${= NULL}, ${dim_3} ${= NULL}, ${...}, colour = ${dim_i}, shape = ${dim_j}, data = ${data.frame}, facets = ${dim_x or .} ~ ${dim_y or .}, geom = c("${point}", "${smooth}", "${boxplot}", "${density}"), main = "${plot title}")</template>
        </entry>
        <entry>
            <trigger id="r">reqp</trigger>
            <description>Load a package from within a function</description>
            <template>require(package = ${packageName})</template>
        </entry>
        <entry>
            <trigger id="r">rfile</trigger>
            <description>Remove a file</description>
            <template>file.remove("${path/file_name}")</template>
        </entry>
        <entry>
            <trigger id="r">rhelp</trigger>
            <description>Help on a topic</description>
            <template>help(${topic})</template>
        </entry>
        <entry>
            <trigger id="r">rvec</trigger>
            <description>Repeat vector</description>
            <template>rep(x = ${N1}:${N1}, times = ${N3})
rep(x = ${N1}:${N1}, times = ${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">save</trigger>
            <description>Save R objects to disk</description>
            <template>save(${obj1, obj2, ..}, file = "${name}.rdata")</template>
        </entry>
        <entry>
            <trigger id="r">sdir</trigger>
            <description>Set working dir</description>
            <template>setwd("${path/to/dir}")</template>
        </entry>
        <entry>
            <trigger id="r">space</trigger>
            <description>Space &amp; indentation convention</description>
            <template># Space between comment and hash

# Short comments can be placed after code preceded 
# by two spaces, #, and then one space.
kMax = 30  # Maximum rate constant

# When indenting your code, use two spaces

# Line length 80 characters

# Space around binary operators (=, +, -, etc.)

# Space after comma

# Space before left parenthesis, except in function call
if (my.var &gt; 10)

# Extra spacing (i.e., more than one space in a row) is okay if it
# improves alignment of equals signs or arrows (&lt;-).</template>
        </entry>
        <entry>
            <trigger id="r">summary</trigger>
            <description>Summary of R object, data structure or anythin</description>
            <template>summary(${obj})</template>
        </entry>
        <entry>
            <trigger id="r">transform</trigger>
            <description>Transform an Object, for Example a Data Frame</description>
            <template>transform(${data.frame}, ${change a column, Ozone = Ozone * 3}, ${add a new column, new = Ozone * 4})</template>
        </entry>
        <entry>
            <trigger id="r">transform1</trigger>
            <description>Transform an Object, for Example a Data Frame</description>
            <template>attach ${data.frame}
transform(${column1}, ${change column1, Ozone = Ozone * 3}, ${column2}, ${change column2, new = Ozone * 4})</template>
        </entry>
        <entry>
            <trigger id="r">try1</trigger>
            <description>Exception handling</description>
            <template>tryCatch({
  ${your main code here}
}, error = function(error) {
  ${details about error here}
})</template>
        </entry>
        <entry>
            <trigger id="r">try2</trigger>
            <description>Exception handling</description>
            <template>tryCatch({
  ${your main code here}
}, error = function(error) {
  ${details about error here}
}, finally = {
  ${clean up work here, reverting changes}
})</template>
        </entry>
        <entry>
            <trigger id="r">vmax</trigger>
            <description>Max of a vector</description>
            <template>max(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vmean</trigger>
            <description>Mean of a vector</description>
            <template>mean(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vmin</trigger>
            <description>Min of a vector</description>
            <template>min(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vsd</trigger>
            <description>Standard deviation of a vector</description>
            <template>sd(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vsum</trigger>
            <description>Sum of vector elements</description>
            <template>sum(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vsummury</trigger>
            <description>Summary of a vector</description>
            <template>summary(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">vvar</trigger>
            <description>Variance of a vector</description>
            <template>var(${nvec})</template>
        </entry>
        <entry>
            <trigger id="r">wdir</trigger>
            <description>Get current working dir</description>
            <template>getwd()</template>
        </entry>
    </snippet>
</scribes>
